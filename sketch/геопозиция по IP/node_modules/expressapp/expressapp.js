"use strict"
const express = require('express');
const bodyParser = require('body-parser')
const mongoDb = require('dbnative');
module.exports = class methods {
  constructor(options) {
    let ref = this;
    ref.options = options;
    ref.reference = 'var global=this;'
    ref.app = express();
    options.require.forEach(function(r) {
      ref[r.name] = require(r.method);
    })
    ref.application();
  }
  application() {
    let ref = this;
    let properties = ref.options.properties;
    let routes = ref.options.app;
    let db = ref.options.db;
    let methods = ref.options.methods;
    let variables = ref.options.globalVariables;
    ref.server = ref.app.listen(properties.portNumber);
    ref.io = require('socket.io').listen(ref.server, function() {
      console.log('server listening at ' + properties.portNumber);
    });
    ref.io.on('connection', function(skt) {
      console.log("connected");
      ref.socket = skt;
    });
    ref.app.use(bodyParser.json());
    ref.app.use(express.static('public'));
    ref.app.use(function(req, res, next) {
      if (properties.header) {
        properties.header.forEach(function(val) {
          res.header(val.type, val.param);
        })
      } else {
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
      }
      next();
    });
    if (properties.routes) {
      properties.routes.forEach(function(val) {
        ref.app.get(val.app, function(req, res) {
          res.sendFile(__dirname + val.path)
        });
      })
    } else {
      app.get('/home', function(req, res) {
        res.sendFile(__dirname + "/public/views/index.html")
      });
    }
    if (db) {
      db.forEach(function(db) {
        ref[db.name] = new mongoDb(db.options);
      })
    }
    if (methods) {
      methods.forEach(function(md) {
        ref[md.name] = (ref.addRefer(md.method)).bind(ref);
      })
    }
    if (variables) {
      variables.forEach(function(md) {
        ref[md.name] = md.value;
      })
    }
    routes.forEach(function(r) {
      ref.app[r.type](r.app, (ref.addRefer(r.method)).bind(ref))
    })

  }
  addRefer(md) {
    let ref = this;
    let temp = md.toString();
    temp = [temp.slice(0, temp.indexOf('{') + 1), ref.reference, temp.slice(temp.indexOf('{') + 1)].join('');
    return new Function(temp.substring(temp.indexOf('{') + 1, temp.lastIndexOf('}')))
  }
  init() {
    let ref = this;
    let methods = ref.options.initMethods;
    if (methods) {
      methods.forEach(function(r) {
        (ref.addRefer(r.method).bind(ref))();
      });
    }
  }
}
